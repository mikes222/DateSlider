package com.mschwartz.dateslider.labeler;

import android.content.Context;

import com.mschwartz.dateslider.TimeBoundaries;
import com.mschwartz.dateslider.TimeObject;
import com.mschwartz.dateslider.timeview.TimeView;

/**
 * This is an abstract class whose job is create TimeViews that can be used
 * to populate a ScrollLayout, and to generate TimeObjects from times that
 * can be used to populate the TimeViews.
 */
public abstract class Labeler {

    protected final String mFormatString;

    protected final TimeBoundaries timeBoundaries;

    /**
     */
    public Labeler(String formatString, TimeBoundaries timeBoundaries) {
        assert (timeBoundaries != null);
        mFormatString = formatString;
        this.timeBoundaries = timeBoundaries;
    }

    /**
     * Returns a new TimeView instance appropriate for population using TimeObjects.
     *
     * @param isCenterView is true when the view is the central view
     * @return The new unpopulated TimeView object
     */
    public abstract TimeView createView(Context context, boolean isCenterView);

    /**
     * This method adds "val" time units (where a time unit is the amount of time that
     * separates one TimeView generated by this labeler from the next -- e.g. if this
     * labeler is producing TimeViews each representing a day, then a time unit would
     * be a single day) to the specified time and returns a TimeObject representing
     * the result.
     * <p/>
     * This method will be called constantly, whenever new date information is required.
     *
     * @param time The time
     * @param val  The number of units to add to the time
     * @return The resulting TimeObject
     */
    public abstract TimeObject add(long time, int val);

    /**
     * This method converts from a calendar to a TimeObject -- it does the actual
     * work of turning a point time into the range and display string that compose
     * a TimeObject.
     *
     * @param time The time to convert
     * @return The resulting TimeObject
     */
    public abstract TimeObject getElem(long time);

}